// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb/v2/remotes/transport (interfaces: RemoteConnectionService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	influxdb "github.com/influxdata/influxdb/v2"
	platform "github.com/influxdata/influxdb/v2/kit/platform"
)

// MockRemoteConnectionService is a mock of RemoteConnectionService interface.
type MockRemoteConnectionService struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteConnectionServiceMockRecorder
}

// MockRemoteConnectionServiceMockRecorder is the mock recorder for MockRemoteConnectionService.
type MockRemoteConnectionServiceMockRecorder struct {
	mock *MockRemoteConnectionService
}

// NewMockRemoteConnectionService creates a new mock instance.
func NewMockRemoteConnectionService(ctrl *gomock.Controller) *MockRemoteConnectionService {
	mock := &MockRemoteConnectionService{ctrl: ctrl}
	mock.recorder = &MockRemoteConnectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteConnectionService) EXPECT() *MockRemoteConnectionServiceMockRecorder {
	return m.recorder
}

// CreateRemoteConnection mocks base method.
func (m *MockRemoteConnectionService) CreateRemoteConnection(arg0 context.Context, arg1 influxdb.CreateRemoteConnectionRequest) (*influxdb.RemoteConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteConnection", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.RemoteConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemoteConnection indicates an expected call of CreateRemoteConnection.
func (mr *MockRemoteConnectionServiceMockRecorder) CreateRemoteConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteConnection", reflect.TypeOf((*MockRemoteConnectionService)(nil).CreateRemoteConnection), arg0, arg1)
}

// DeleteRemoteConnection mocks base method.
func (m *MockRemoteConnectionService) DeleteRemoteConnection(arg0 context.Context, arg1 platform.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemoteConnection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemoteConnection indicates an expected call of DeleteRemoteConnection.
func (mr *MockRemoteConnectionServiceMockRecorder) DeleteRemoteConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemoteConnection", reflect.TypeOf((*MockRemoteConnectionService)(nil).DeleteRemoteConnection), arg0, arg1)
}

// GetRemoteConnection mocks base method.
func (m *MockRemoteConnectionService) GetRemoteConnection(arg0 context.Context, arg1 platform.ID) (*influxdb.RemoteConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteConnection", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.RemoteConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteConnection indicates an expected call of GetRemoteConnection.
func (mr *MockRemoteConnectionServiceMockRecorder) GetRemoteConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteConnection", reflect.TypeOf((*MockRemoteConnectionService)(nil).GetRemoteConnection), arg0, arg1)
}

// ListRemoteConnections mocks base method.
func (m *MockRemoteConnectionService) ListRemoteConnections(arg0 context.Context, arg1 influxdb.RemoteConnectionListFilter) (*influxdb.RemoteConnections, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteConnections", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.RemoteConnections)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteConnections indicates an expected call of ListRemoteConnections.
func (mr *MockRemoteConnectionServiceMockRecorder) ListRemoteConnections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteConnections", reflect.TypeOf((*MockRemoteConnectionService)(nil).ListRemoteConnections), arg0, arg1)
}

// UpdateRemoteConnection mocks base method.
func (m *MockRemoteConnectionService) UpdateRemoteConnection(arg0 context.Context, arg1 platform.ID, arg2 influxdb.UpdateRemoteConnectionRequest) (*influxdb.RemoteConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteConnection", arg0, arg1, arg2)
	ret0, _ := ret[0].(*influxdb.RemoteConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRemoteConnection indicates an expected call of UpdateRemoteConnection.
func (mr *MockRemoteConnectionServiceMockRecorder) UpdateRemoteConnection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteConnection", reflect.TypeOf((*MockRemoteConnectionService)(nil).UpdateRemoteConnection), arg0, arg1, arg2)
}
